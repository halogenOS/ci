#!/bin/bash

reflectorName "ROM building"
reflectorId   "rom_build"

function reflect() {
  pushd src

  export USE_CCACHE=false
  if [ -n "$CCACHE_DIR" ]; then
	export USE_CCACHE=true
	export CCACHE_EXEC=$(which ccache)
	if [ -z "$CCACHE_EXEC" ]; then
		echo "Could not find ccache executable!"
		return 1
	else
		echo "Using ccache executable: $CCACHE_EXEC"
	fi
	if [ ! -d "$CCACHE_DIR" ]; then
		echo "ccache dir $CCACHE_DIR does not exist"
		return 1
	fi
	echo "ccache dir: $CCACHE_DIR"
	if ! touch "$CCACHE_DIR/.test_ccache"; then
		echo "Cannot write to $CCACHE_DIR, make sure it has the correct permissions set."
		return 1
	fi
	rm "$CCACHE_DIR/.test_ccache"

	echo "Configuring ccache"
	"$CCACHE_EXEC" -d "$CCACHE_DIR" -M 120G
  fi

  source build/envsetup.sh

  if [ "$skip_build" != "true" ]; then
    if [ "$installclean" == "true" ]; then
      lunchauto aosp_${targetdevice}-${buildtype}
      make installclean
    fi

    messaging_send_message "Build [${RUN}](${BUILD_URL}) started for ${targetdevice} (${buildtype}) on $(hostname)"$'\n'"$([ ! -z "$repopick" ] && echo "Repopick: $repopick")"
    build full aosp_${targetdevice}-${buildtype} $([ "${clean}" == "false" ] && echo -n "noclean") || (
      messaging_send_message "Build [${RUN}](${BUILD_URL}) for ${targetdevice} failed on $(hostname)"
      return 1
    )
    echo "Build finished successfully."
    messaging_send_message "Build [${RUN}](${BUILD_URL}) for ${targetdevice} finished on $(hostname)" || :
    echo
    if [ -n "$USE_CCACHE" ]; then
        echo "ccache statistics:"
        "$CCACHE_EXEC" -d "$CCACHE_DIR" --print-stats || :
    fi
    echo "Build script finished."
  else
    lunch aosp_${targetdevice}-${buildtype}
  fi

  popd
}

